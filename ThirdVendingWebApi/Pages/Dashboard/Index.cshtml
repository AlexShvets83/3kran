@page
@model ThirdVendingWebApi.Pages.Dashboard.IndexModel
@{
}

<style>
    #gridContainer .dx-toolbar .dx-texteditor { width: 100% !important; }

    #gridContainer .dx-toolbar .dx-toolbar-after {
        padding-left: 0;
        width: 100% !important;
    }

    #gridContainer .dx-datagrid-search-panel { margin-left: 0; }
</style>

<div class="row dashboard">
    <section class="col-12 col-lg-4 order-lg-1 left">
        <div id="gridContainer"></div>
        @*<div> <br /></div>*@
        <br/>
        <!-- Кнопка вызова окна добавления автомата -->
        <div align="right">
            <span data-toggle="tooltip" data-placement="left" title="Добавить (зарегистрировать) автомат">
                <button onclick="addDevice(device, user)"
                        class="btn btn-primary btn-sm mb-3" data-toggle="modal"
                        data-target="#popupContainer">
                    <i class="fa fa-plus-square"></i>&nbsp;&nbsp;Добавить автомат
                </button>
            </span>
        </div>
    </section>
</div>

<div class="modal" tabindex="-1" role="dialog" id="popupContainer">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fa fa-list-ul text-secondary">Добавить (зарегистрировать) автомат</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger" id="errors" style="display: none">
                    <i class="fa fa-warning" aria-hidden="true"></i>&nbsp;&nbsp;
                    <strong>Errors</strong>
                </div>
                <div id="deviceForm"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary fa fa-ban" data-dismiss="modal"> Отмена</button>
                <button type="button" id="btnAddDevice" class="btn btn-primary fa fa-plus-square" onclick="postDevice(event)"> Добавить</button>
            </div>
        </div>
    </div>
</div>


<script>
    var user;
    var device;
    var timeZones = [
        {
            value: "+2",
            name: "UTC+02:00 Калининград"
        },
        {
            value: "+3",
            name: "UTC+03:00 Москва"
        },
        {
            value: "+4",
            name: "UTC+04:00 Самара"
        },
        {
            value: "+5",
            name: "UTC+05:00 Екатеринбург"
        },
        {
            value: "+6",
            name: "UTC+06:00 Омск"
        },
        {
            value: "+7",
            name: "UTC+07:00 Красноярск"
        },
        {
            value: "+8",
            name: "UTC+08:00 Иркутск"
        },
        {
            value: "+9",
            name: "UTC+09:00 Якутск"
        },
        {
            value: "+10",
            name: "UTC+10:00 Владивосток"
        },
        {
            value: "+11",
            name: "UTC+11:00 Магадан"
        },
        {
            value: "+12",
            name: "UTC+12:00 Камчатский край"
        }
    ];
    var currencies = [
        {
            value: "RUR",
            name: "Российский рубль"
        },
        {
            value: "KZT",
            name: "Казахстанский тенге"
        },
        {
            value: "AZN",
            name: "Азербайджанский манат"
        },
        {
            value: "UZS",
            name: "Узбекский сум"
        },
        {
            value: "BYR",
            name: "Белорусский рубль"
        }
    ];

    
    function updateDevicesList() {
        $.getJSON("/api/devices", null) // пытаемся загрузить данные с сервера с помощью HTTP запроса методом GET
            .then(function(data) { // добавляем обработчик при удачном выполнении запроса
                $("#gridContainer").dxDataGrid('instance').option('dataSource', data);
            });
    }

    $(function() {

        $("#gridContainer").dxDataGrid({
            //dataSource: dataS,
            showColumnLines: true,
            showRowLines: true,
            keyExpr: "id",
            //allowColumnResizing: true,
            //columnResizingMode: 'widget',
            columnAutoWidth: true,
            columnFixing: { enabled: true },
            cellHintEnabled: true,
            paging: { pageSize: 10 },
            //pager: {
            //    showPageSizeSelector: true,
            //    allowedPageSizes: [10, 20, 30, 50, 100],
            //    showInfo: true
            //},
            //filterRow: {
            //    visible: true,
            //    applyFilter: "auto"
            //},
            //headerFilter: { visible: true },
            showBorders: true,
            wordWrapEnabled: true,
            selection: { mode: 'single' },
            //scrolling: {mode: "virtual"},
            //height: 800,
            hoverStateEnabled: true,
            //columns: GetColumns(headers),
            //columnChooser: { enabled: true, mode: 'select', title: 'ColumnChooser' },
            @* "export": {
            ignoreExcelErrors: true,
                enabled: true,
                    fileName: document.title,
                        allowExportSelectedData: false,
                            texts: {
                exportAll: '@Localizer["ExportAll"]',
                    exportSelectedRows: '@Localizer["Export selected rows"]',
                        exportTo: '@Localizer["Export"]'
            }
        },*@
            loadPanel: { enabled: true },


            //paging: {
            //    pageSize: 10
            //},
            //pager: {
            //    showPageSizeSelector: true,
            //    allowedPageSizes: [10, 25, 50, 100]
            //},
            //remoteOperations: false,
            searchPanel: {
                visible: true,
                highlightCaseSensitive: true,
                placeholder: "Начните вводить адрес автомата или IMEI...",
                width: '100%'
            },
            //groupPanel: { visible: true },
            //grouping: {
            //    autoExpandAll: false
            //},
            //allowColumnReordering: true,
            //rowAlternationEnabled: true,
            //showBorders: true,
            onSelectionChanged: function(e) {
                device = e.selectedRowsData[0];
                //var asd = data;
                //var dataGrid = $("#devices").dxDataGrid("instance");
                //var selectedData = dataGrid.getSelectedRowsData();
                //if (selectedData.length === 0) return;
                //var list = selectedData[0].DataTypes;
                //selectBoxDataType.option("dataSource", list);
            },
            onCellPrepared: function(options) {
                const fieldData = options.value;
                var fieldHtml = "";
                const column = options.column;
                if (options.rowType === "data" && column.dataField === "alerts") {
                    fieldHtml = '<i class="fa fa-exclamation-triangle text-danger"></i> Нет связи';
                    options.cellElement.html(fieldHtml);
                }
                if (fieldData && fieldData.value) {
                    if (fieldData.diff) {
                        options.cellElement.addClass((fieldData.diff > 0) ? "inc" : "dec");
                        fieldHtml += "<div class='current-value'>" +
                            DevExpress.localization.formatNumber(fieldData.value, { type: "currency", currency: "USD", precision: 2 }) +
                            "</div> <div class='diff'>" +
                            Math.abs(fieldData.diff).toFixed(2) +
                            "  </div>";
                    } else {
                        fieldHtml = fieldData.value;
                    }
                    options.cellElement.html(fieldHtml);
                }
            },
            //onCellPrepared: function(cellElement, cellInfo) {
            //    if (!cellInfo) return;
            //    if (cellInfo.column.dataField === 'alerts') {
            //        var arr = cellInfo.data;
            //        if (!cellInfo.data) { cellElement.addClass('Red'); }

            //        if (jQuery.inArray("NO_LINK", arr)){cellElement.addClass('Red');}
            //        if (jQuery.inArray("TANK_EMPTY", arr)){cellElement.addClass('Orange');}
            //        if (jQuery.inArray("NO_SALES", arr)){cellElement.addClass('Yellow');}
            //        //if(cellInfo.data[0] === 'Green'){cellElement.addClass('Green');}
            //    }
            //},
            columns: [
                //{
                //    dataField: "Id",
                //    groupIndex: 0
                //},
                {
                    //width: '170px',
                    dataField: "imei",
                    allowSorting: false,
                    caption: "IMEI",
                    headerCellTemplate: function(header, info) {
                        $('<b style="color: black">')
                            .html(info.column.caption)
                            .css('font-size', '14px')
                            .appendTo(header);
                    }
                    //dataType: "number",
                    //format: "currency",
                    //alignment: "right"
                },
                //{
                //    dataField: "Discount",
                //    caption: "Discount %",
                //    dataType: "number",
                //    format: "percent",
                //    alignment: "right",
                //    allowGrouping: false,
                //    //cellTemplate: discountCellTemplate,
                //    cssClass: "bullet"
                //},
                //{
                //    dataField: "SaleDate",
                //    dataType: "date"
                //},
                {
                    allowSorting: false,
                    dataField: "address",
                    caption: "Адрес автомата",
                    dataType: "string",
                    headerCellTemplate: function(header, info) {
                        $('<b style="color: black">')
                            .html(info.column.caption)
                            .css('font-size', '14px')
                            .appendTo(header);
                    }
                },
                {
                    allowSorting: false,
                    dataField: "alerts",
                    caption: "Состояние",
                    //width: '110px',
                    headerCellTemplate: function(header, info) {
                        $('<b style="color: black">')
                            .html(info.column.caption)
                            .css('font-size', '14px')
                            .appendTo(header);
                    },
                    //cellTemplate: function(element, info) {
                    //    if (!info.text)
                    //        element.append('<div>' + "Error" + '</div>').css("fa fa - exclamation - triangle text - danger");
                    //           // .css("color", "blue").css("class", "fa fa - exclamation - triangle text - danger");
                    //}
                },
                {
                    //caption: "Удалить",
                    width: 30,
                    minWidth: 30,
                    headerCellTemplate: function(header, info) {
                        $('<b style="color: black">')
                            .html(info.column.caption)
                            .css('font-size', '14px')
                            .appendTo(header);
                    },
                    type: "buttons",
                    buttons: [
                        //{
                        //    name: "delete",
                        //    cssClass: "fa fa-window-close text-danger"
                        //},
                        {
                            hint: "Удалить",
                            //icon: "fa fa-window-close",
                            cssClass: "fa fa-window-close text-danger",
                            //visible: function(e) {
                            //    return !e.row.isEditing && !isChief(e.row.data.Position);
                            //},
                            onClick: function(e) {
                                const row = e.row.data;
                                const id = row.id;
                                if (!id) return;

                                DevExpress.ui.dialog.custom({
                                    title: `Удаление автомата ${row.imei}`,
                                    message: 'Вы уверены, что хотите удалить этот автомат из списка?',
                                    buttons: [
                                        {
                                            text: "Отмена",
                                            icon: 'fa fa-ban',
                                            onClick: function() {
                                                return {
                                                    dialogResult: false
                                                    //buttonText: e.component.option("text"), /* ... */
                                                }
                                            }
                                        },
                                        {
                                            text: "Удалить",
                                            type: "danger",
                                            icon: 'fa fa-remove',
                                            onClick: function() {
                                                return {
                                                    dialogResult: true
                                                    //buttonText: e.component.option("text"), /* ... */
                                                }
                                            }
                                        }
                                    ]
                                }).show().done(function(dialogResult) {
                                    //todo delete device
                                    if (dialogResult) {
                                        $.deleteObj(`/api/device/${id}`).then(function() {
                                            updateDevicesList();
                                            },
                                            function(res) {
                                                updateDevicesList();
                                            });
                                        //updateDevicesList();
                                        return;
                                    }
                                });

                                //var result = DevExpress.ui.dialog.confirm('Удаление автомата', 'Вы уверены, что хотите удалить этот автомат из списка?');
                                //result.done(function (dialogResult) {
                                //    if (dialogResult) {
                                //        //$.delete
                                //        //post(urlStr, { __RequestVerificationToken: token, id: data[0].ID });
                                //    } else
                                //        return;
                                //});

                                //$("#popupContainer").dxPopup({
                                //    showTitle: true,
                                //    visible: true
                                //}).show();

                                //popup.show();
                                //var clonedItem = $.extend({}, e.row.data, { ID: ++maxID });

                                //employees.splice(e.row.rowIndex, 0, clonedItem);

                                //e.component.refresh(true);
                                //e.event.preventDefault();
                            }
                        }
                    ]
                }
                //{
                //    dataField: "Sector",
                //    dataType: "string",
                //},
                //{
                //    dataField: "Channel",
                //    dataType: "string",
                //},
                //{
                //    dataField: "Customer",
                //    dataType: "string",
                //    width: 150
                //}
            ]
        });
        updateDevicesList();
        //function name(parameters) {

        //}
        //$.getJSON("/api/devices", null) // пытаемся загрузить данные с сервера с помощью HTTP запроса методом GET
        //    .then(function(data) { // добавляем обработчик при удачном выполнении запроса
        //        $("#gridContainer").dxDataGrid('instance').option('dataSource', data);
        //    });


        //var form = $("#form").dxForm({
        //    formData: function() {

        //        if (!device) {
        //            device = {
        //                imei: "",
        //                address: "",
        //                phone: "",
        //                timeZone: "",
        //                currency: ""
        //            }
        //        }

        //        return device;
        //    },
        //    readOnly: false,
        //    showColonAfterLabel: true,
        //    labelLocation: "top",
        //    minColWidth: 300,
        //    colCount: 2
        //}).dxForm("instance");
    });
   

    function addDevice(dev, user) {

        if (!dev) {
            //todo get owner
            const onerId = null;
            dev = {
                imei: "",
                address: "",
                phone: "",
                timeZone: "+2",
                currency: "RUR",
                ownerId: onerId
            }
        }

        const form = $("#deviceForm").dxForm({
            formData: dev,
            readOnly: false,
            showColonAfterLabel: true,
            labelLocation: "top",
            items: [
                //{
                //    dataField: "imei",
                //    //editorType: "dxNumberBox",
                //    label: {
                //        text: "ID автомата",
                //        visible: true
                //    },
                //    editorOptions: {
                //        placeholder: "Введите ID автомата (15 цифр)",
                //        mask: "X00000000000000",
                //        maskChar: " ",
                //        maskRules: {
                //            "X": /[1-9]/
                //        },
                //        maskInvalidMessage: "ID автомата должен иметь правильный формат",
                //        useMaskedValue: true
                //    },
                //    validationRules: [
                //        {
                //            type: "required",
                //            message: "Введите ID автомата (15 цифр)"
                //        },
                //        //{
                //        //    type: "stringLength",
                //        //    min: 15,
                //        //    message: "ID автомата должен быть не менее 15 цифр"
                //        //},
                //        //{
                //        //    type: "stringLength",
                //        //    max: 17,
                //        //    message: "ID автомата не должен быть длиннее 17 цифр"
                //        //},
                //        {
                //            type: "async",
                //            message: "ID автомата уже зарегистрирован.",
                //            validationCallback: function (params) {
                //                return checkImei(params.value);
                //            }
                //        }
                //    ]
                //},
                {
                    dataField: "imei",
                    editorType: "dxNumberBox",
                    label: {
                        text: "ID автомата",
                        visible: true
                    },
                    editorOptions: {
                        placeholder: "Введите ID автомата (15 цифр)",
                        mode: "number",
                        value: null
 
                    },
                    validationRules: [
                        {
                            type: "required",
                            message: "Введите ID автомата (15 цифр)"
                        },
                        {
                            type: "stringLength",
                            min: 15,
                            message: "ID автомата должен быть не менее 15 цифр"
                        },
                        {
                            type: "stringLength",
                            max: 17,
                            message: "ID автомата не должен быть длиннее 17 цифр"
                        },
                        {
                            type: "async",
                            message: "ID автомата уже зарегистрирован.",
                            validationCallback: function (params) {
                                return checkImei(params.value);
                            }
                        }
                    ]
                },
                {
                    dataField: "address",
                    label: {
                        text: "Адрес",
                        visible: true
                    },
                    editorOptions: {
                        placeholder: "Адрес автомата"
                    },
                    validationRules: [
                        {
                            type: "required",
                            message: "Нужно ввести адрес"
                        }
                    ]
                },
                {
                    dataField: "phone",
                    editorType: "dxNumberBox",
                    label: {
                        text: "Телефон",
                        visible: true
                    },
                    editorOptions: {
                        placeholder: "Введите номер телефона",
                        value: null
                    }
                },
                {
                    dataField: "timeZone",
                    editorType: "dxSelectBox",
                    label: {
                        text: "Часовой пояс",
                        visible: true
                    },
                    editorOptions: {
                        dataSource: timeZones,
                        valueExpr: "value",
                        displayExpr: "name"
                    }
                },
                {
                    dataField: "currency",
                    editorType: "dxSelectBox",
                    label: {
                        text: "Валюта",
                        visible: true
                    },
                    editorOptions: {
                        dataSource: currencies,
                        valueExpr: "value",
                        displayExpr: "name"
                    }
                }
            ]
            //minColWidth: 300,
            //colCount: 2
        }).dxForm("instance");
    }

    var checkImei = function(value) {
        //return $.getJSON(`/api/validation/imei/${value}`, null).promise;
        const get = $.get(`/api/validation/imei/${value}`);
        return get.promise();
    }

    // onclick="postDevice()"
    //$("btnAddDevice").click(function (event) { postDevice(event);});

    function postDevice(e) {
        document.getElementById("errors").style.display = "none";
        const valid = $('#deviceForm').dxForm('instance').validate();
        if (valid.isValid === false) return;

        const data = $('#deviceForm').dxForm('instance').option('formData');

        data.imei = `${data.imei}`;
        data.phone = `${data.phone}`;

        const request = $.postJSON('/api/device', data, null);
        request.then(function() {
            $('#popupContainer').modal('hide');
            updateDevicesList();
            },
            function(res) {
                if (res.readyState === 4 && res.status === 200) {
                    $('#popupContainer').modal('hide');
                    updateDevicesList();
                } else {
                    const message = res.responseText ? res.responseText : `Error${res.status}`;
                    document.getElementById("errors").innerHTML = message;
                    document.getElementById("errors").style.display = "block";
                }
            });

 //request.fail(function(data) {
        //    e.preventDefault();
        //    document.getElementById("errors").innerHTML = data.responseText;
        //    document.getElementById("errors").style.display = "block";
        //});
        
    }
    //function GetDataSourceStr() {
    //    var urlStr = "/api/devices";
    //    return urlStr;
    //}
</script>
