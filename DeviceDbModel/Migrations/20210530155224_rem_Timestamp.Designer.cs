// <auto-generated />
using System;
using DeviceDbModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DeviceDbModel.Migrations
{
    [DbContext(typeof(DeviceDBContext))]
    [Migration("20210530155224_rem_Timestamp")]
    partial class rem_Timestamp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("DeviceDbModel.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<bool>("Activated")
                        .HasColumnType("boolean")
                        .HasColumnName("activated");

                    b.Property<string>("AddDealerName")
                        .HasColumnType("text")
                        .HasColumnName("add_dealer_name");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("InfoEmails")
                        .HasColumnType("text")
                        .HasColumnName("info_emails");

                    b.Property<string>("LangKey")
                        .HasColumnType("text")
                        .HasColumnName("lang_key");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("Organization")
                        .HasColumnType("text")
                        .HasColumnName("organization");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<int>("UserAlerts")
                        .HasColumnType("integer")
                        .HasColumnName("user_alerts");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_asp_net_users_country_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_asp_net_users_owner_id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DeviceDbModel.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alpha2Code")
                        .HasColumnType("text")
                        .HasColumnName("alpha2code");

                    b.Property<string>("Alpha3Code")
                        .HasColumnType("text")
                        .HasColumnName("alpha3code");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.ToTable("countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alpha2Code = "RU",
                            Alpha3Code = "RUS",
                            Code = 643,
                            Name = "Россия"
                        },
                        new
                        {
                            Id = 2,
                            Alpha2Code = "KZ",
                            Alpha3Code = "KAZ",
                            Code = 398,
                            Name = "Казахстан"
                        },
                        new
                        {
                            Id = 3,
                            Alpha2Code = "AZ",
                            Alpha3Code = "AZE",
                            Code = 31,
                            Name = "Азербайджан"
                        },
                        new
                        {
                            Id = 4,
                            Alpha2Code = "UZ",
                            Alpha3Code = "UZB",
                            Code = 860,
                            Name = "Узбекистан"
                        },
                        new
                        {
                            Id = 5,
                            Alpha2Code = "BY",
                            Alpha3Code = "BLR",
                            Code = 112,
                            Name = "Белоруссия"
                        });
                });

            modelBuilder.Entity("DeviceDbModel.Models.DevAlert", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CodeType")
                        .HasColumnType("integer")
                        .HasColumnName("code_type");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text")
                        .HasColumnName("device_id");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime>("MessageDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("message_date");

                    b.HasKey("Id")
                        .HasName("pk_device_alerts");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_device_alerts_device_id");

                    b.HasIndex("MessageDate")
                        .HasDatabaseName("ix_device_alerts_message_date");

                    b.ToTable("device_alerts");
                });

            modelBuilder.Entity("DeviceDbModel.Models.DevEncash", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real")
                        .HasColumnName("amount");

                    b.Property<float>("AmountBill")
                        .HasColumnType("real")
                        .HasColumnName("amount_bill");

                    b.Property<float>("AmountCoin")
                        .HasColumnType("real")
                        .HasColumnName("amount_coin");

                    b.Property<string>("Bills")
                        .HasColumnType("text")
                        .HasColumnName("bills");

                    b.Property<string>("Coins")
                        .HasColumnType("text")
                        .HasColumnName("coins");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text")
                        .HasColumnName("device_id");

                    b.Property<DateTime>("MessageDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("message_date");

                    b.HasKey("Id")
                        .HasName("pk_device_encashes");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_device_encashes_device_id");

                    b.HasIndex("MessageDate")
                        .HasDatabaseName("ix_device_encashes_message_date");

                    b.ToTable("device_encashes");
                });

            modelBuilder.Entity("DeviceDbModel.Models.DevInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DeviceId")
                        .HasColumnType("text")
                        .HasColumnName("device_id");

                    b.Property<DateTime>("MessageDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("message_date");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<float>("Value")
                        .HasColumnType("real")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_device_infos");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_device_infos_device_id");

                    b.HasIndex("MessageDate")
                        .HasDatabaseName("ix_device_infos_message_date");

                    b.HasIndex("DeviceId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_device_infos_device_id_name");

                    b.ToTable("device_infos");
                });

            modelBuilder.Entity("DeviceDbModel.Models.DevSale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real")
                        .HasColumnName("amount");

                    b.Property<string>("Bills")
                        .HasColumnType("text")
                        .HasColumnName("bills");

                    b.Property<string>("Coins")
                        .HasColumnType("text")
                        .HasColumnName("coins");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text")
                        .HasColumnName("device_id");

                    b.Property<DateTime>("MessageDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("message_date");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer")
                        .HasColumnName("payment_type");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<float>("Quantity")
                        .HasColumnType("real")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_device_sales");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_device_sales_device_id");

                    b.HasIndex("MessageDate")
                        .HasDatabaseName("ix_device_sales_message_date");

                    b.ToTable("device_sales");
                });

            modelBuilder.Entity("DeviceDbModel.Models.DevSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DeviceId")
                        .HasColumnType("text")
                        .HasColumnName("device_id");

                    b.Property<string>("Md5")
                        .HasColumnType("text")
                        .HasColumnName("md5");

                    b.Property<DateTime>("MessageDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("message_date");

                    b.Property<string>("Payload")
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<string>("Topic")
                        .HasColumnType("text")
                        .HasColumnName("topic");

                    b.Property<int>("TopicType")
                        .HasColumnType("integer")
                        .HasColumnName("topic_type");

                    b.HasKey("Id")
                        .HasName("pk_device_settings");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_device_settings_device_id");

                    b.HasIndex("MessageDate")
                        .HasDatabaseName("ix_device_settings_message_date");

                    b.HasIndex("TopicType")
                        .HasDatabaseName("ix_device_settings_topic_type");

                    b.HasIndex("DeviceId", "MessageDate", "Md5")
                        .IsUnique()
                        .HasDatabaseName("ix_device_settings_device_id_message_date_md5");

                    b.ToTable("device_settings");
                });

            modelBuilder.Entity("DeviceDbModel.Models.DevStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DeviceId")
                        .HasColumnType("text")
                        .HasColumnName("device_id");

                    b.Property<DateTime>("MessageDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("message_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<float>("Temperature")
                        .HasColumnType("real")
                        .HasColumnName("temperature");

                    b.Property<float>("TotalMoney")
                        .HasColumnType("real")
                        .HasColumnName("total_money");

                    b.Property<float>("TotalSold")
                        .HasColumnType("real")
                        .HasColumnName("total_sold");

                    b.HasKey("Id")
                        .HasName("pk_device_last_status");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_device_last_status_device_id");

                    b.HasIndex("MessageDate")
                        .HasDatabaseName("ix_device_last_status_message_date");

                    b.ToTable("device_last_status");
                });

            modelBuilder.Entity("DeviceDbModel.Models.Device", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Currency")
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("Imei")
                        .HasColumnType("text")
                        .HasColumnName("imei");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<int>("TimeZone")
                        .HasColumnType("integer")
                        .HasColumnName("time_zone");

                    b.HasKey("Id")
                        .HasName("pk_devices");

                    b.HasIndex("Address")
                        .HasDatabaseName("ix_devices_address");

                    b.HasIndex("Imei")
                        .IsUnique()
                        .HasDatabaseName("ix_devices_imei");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_devices_owner_id");

                    b.ToTable("devices");
                });

            modelBuilder.Entity("DeviceDbModel.Models.InviteRegistration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiration_date");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_invite_registrations");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_invite_registrations_user_id");

                    b.ToTable("invite_registrations");
                });

            modelBuilder.Entity("DeviceDbModel.Models.UserDevicePermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("CommerceVisible")
                        .HasColumnType("boolean")
                        .HasColumnName("commerce_visible");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text")
                        .HasColumnName("device_id");

                    b.Property<bool>("TechEditable")
                        .HasColumnType("boolean")
                        .HasColumnName("tech_editable");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_device_permissions");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_user_device_permissions_device_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_device_permissions_user_id");

                    b.ToTable("user_device_permissions");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("user_code");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("device_code");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("subject_id");

                    b.HasKey("UserCode")
                        .HasName("pk_device_codes");

                    b.HasIndex("DeviceCode")
                        .IsUnique()
                        .HasDatabaseName("ix_device_codes_device_code");

                    b.HasIndex("Expiration")
                        .HasDatabaseName("ix_device_codes_expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("key");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("consumed_time");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("subject_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Key")
                        .HasName("pk_persisted_grants");

                    b.HasIndex("Expiration")
                        .HasDatabaseName("ix_persisted_grants_expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type")
                        .HasDatabaseName("ix_persisted_grants_subject_id_client_id_type");

                    b.HasIndex("SubjectId", "SessionId", "Type")
                        .HasDatabaseName("ix_persisted_grants_subject_id_session_id_type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DeviceDbModel.Models.ApplicationUser", b =>
                {
                    b.HasOne("DeviceDbModel.Models.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_asp_net_users_countries_country_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DeviceDbModel.Models.ApplicationUser", "Owner")
                        .WithMany("Сustomers")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_asp_net_users_asp_net_users_owner_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DeviceDbModel.Models.DevAlert", b =>
                {
                    b.HasOne("DeviceDbModel.Models.Device", "Device")
                        .WithMany("DevAlerts")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_device_alerts_devices_device_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Device");
                });

            modelBuilder.Entity("DeviceDbModel.Models.DevEncash", b =>
                {
                    b.HasOne("DeviceDbModel.Models.Device", "Device")
                        .WithMany("DevEncashes")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_device_encashes_devices_device_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Device");
                });

            modelBuilder.Entity("DeviceDbModel.Models.DevInfo", b =>
                {
                    b.HasOne("DeviceDbModel.Models.Device", "Device")
                        .WithMany("DevInfos")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_device_infos_devices_device_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Device");
                });

            modelBuilder.Entity("DeviceDbModel.Models.DevSale", b =>
                {
                    b.HasOne("DeviceDbModel.Models.Device", "Device")
                        .WithMany("DevSales")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_device_sales_devices_device_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Device");
                });

            modelBuilder.Entity("DeviceDbModel.Models.DevSetting", b =>
                {
                    b.HasOne("DeviceDbModel.Models.Device", "Device")
                        .WithMany("DevSettings")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_device_settings_devices_device_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Device");
                });

            modelBuilder.Entity("DeviceDbModel.Models.DevStatus", b =>
                {
                    b.HasOne("DeviceDbModel.Models.Device", "Device")
                        .WithMany("DevStatuses")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_device_last_status_devices_device_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Device");
                });

            modelBuilder.Entity("DeviceDbModel.Models.Device", b =>
                {
                    b.HasOne("DeviceDbModel.Models.ApplicationUser", "User")
                        .WithMany("Devices")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_devices_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("DeviceDbModel.Models.InviteRegistration", b =>
                {
                    b.HasOne("DeviceDbModel.Models.ApplicationUser", "User")
                        .WithMany("InviteRegistrations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_invite_registrations_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("DeviceDbModel.Models.UserDevicePermission", b =>
                {
                    b.HasOne("DeviceDbModel.Models.Device", "Device")
                        .WithMany("UserDevicePermissions")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_user_device_permissions_devices_device_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeviceDbModel.Models.ApplicationUser", "User")
                        .WithMany("UserDevicePermissions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_device_permissions_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Device");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DeviceDbModel.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DeviceDbModel.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeviceDbModel.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DeviceDbModel.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeviceDbModel.Models.ApplicationUser", b =>
                {
                    b.Navigation("Сustomers");

                    b.Navigation("Devices");

                    b.Navigation("InviteRegistrations");

                    b.Navigation("UserDevicePermissions");
                });

            modelBuilder.Entity("DeviceDbModel.Models.Country", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DeviceDbModel.Models.Device", b =>
                {
                    b.Navigation("DevAlerts");

                    b.Navigation("DevEncashes");

                    b.Navigation("DevInfos");

                    b.Navigation("DevSales");

                    b.Navigation("DevSettings");

                    b.Navigation("DevStatuses");

                    b.Navigation("UserDevicePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
