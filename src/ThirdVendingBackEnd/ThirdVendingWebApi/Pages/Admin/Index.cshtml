@page
@model ThirdVendingWebApi.Pages.Admin.IndexModel
@{
  ViewData["Title"] = "Кабинет администрирования";
}

<style>
    .dx-toolbar .dx-texteditor {
        width: 100% !important;
    }

    .dx-toolbar .dx-toolbar-after {
        padding-left: 0;
        width: 100% !important;
    }

    .dx-datagrid-search-panel {
        margin-left: 0;
    }

    .vert-align {
        vertical-align: middle !important;
    }

    .vert-btn-align {
        vertical-align: middle !important;
        padding: 0 !important;
        padding-left: 2px !important;
        /*margin-left: 2px !important;*/
    }
</style>

<div id="tooltipContainer"></div>
<!-- Модальное окно подтверждения удаления пользователя -->
<div class="modal" tabindex="-1" role="dialog" id="deletePopup">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fa fa-remove text-danger"></i>&nbsp;&nbsp;Внимание!</h5>

                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="deleteUserId" style="display: none" value=""></div>
                <div class="alert alert-danger" id="deleteError" role="alert" style="display: none">
                    <i class="fa fa-warning" aria-hidden="true"></i>
                </div>
                <div></div>
                <div id="deleteCaption" style="text-align: center"></div>
                <hr />
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" value="" id="chk1" data-toggle="toggle">
                    <label class="form-check-label" for="chk1">
                        Вы уверены что хотите удалить этого пользователя?
                    </label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary fa fa-ban" data-dismiss="modal"> Отмена</button>
                <button type="button" id="deleteBtn" class="btn btn-danger fa fa-remove" disabled onclick="deleteUser()"> Удалить</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно редактирования пользователя -->
<div class="modal" tabindex="-1" role="dialog" id="userPopup">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fa fa-user text-warning"></i>&nbsp;&nbsp;Профиль пользователя</h5>

                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger" id="userError" role="alert" style="display: none">
                    <i class="fa fa-warning" aria-hidden="true"></i>
                </div>
                <div id="userForm"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary fa fa-ban" data-dismiss="modal"> Отмена</button>
                <button type="button" class="btn btn-primary fa fa-save" onclick="saveUser()"> Сохранить</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно показа полного списка аварий и событий -->
<div class="modal" tabindex="-1" role="dialog" id="alertsPopup">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="popupTitle"><i class="fa fa-exclamation-triangle text-warning"></i>&nbsp;&nbsp;Аварии за период</h5>

                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <div class="form-group">
                    <input type="text" class="form-control" id="dateRangePicker">
                </div>
                <small class="form-text text-muted">
                    Задайте календарный диапазон
                </small>
                <div id="gridAlerts"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary fa fa-file-excel-o" onclick="openDownloadFileDialog()"> Экспорт</button>
                <button type="button" class="btn btn-secondary fa fa-times" data-dismiss="modal"> Закрыть</button>

                @*<button type="button" class="btn btn-primary" onclick="openDownloadFileDialog()">
                        <i class="fa fa-file-excel-o" aria-hidden="true"></i>&nbsp;&nbsp;Экспорт
                    </button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="clear()">
                        <i class="fa fa-times"></i>&nbsp;&nbsp;Закрыть
                    </button>*@
            </div>

        </div>
    </div>
</div>

<!-- Модальное окно технических настроек автомата -->
<div class="modal" tabindex="-1" role="dialog" id="popupDevSettings">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fa fa-wrench text-secondary"></i>&nbsp;&nbsp;Технические настройки автомата</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="deviceSettingsForm"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary fa fa-ban" data-dismiss="modal"> Закрыть</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно профиля автомата -->
<div class="modal" tabindex="-1" role="dialog" id="popupDevice">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="headerAddDevice"><i class="fa fa-list-ul text-secondary"></i>&nbsp;&nbsp;Добавить (зарегистрировать) автомат</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="popupDevId" style="display: none" value=""></div>
                <div class="alert alert-danger" id="errors" style="display: none">
                    <i class="fa fa-warning" aria-hidden="true"></i>&nbsp;&nbsp;
                    <strong>Errors</strong>
                </div>
                <div id="deviceForm"></div>
            </div>
            <div class="modal-footer">
                <span id="devMetricsAdd">

                </span>
                <button type="button" class="btn btn-secondary fa fa-ban" data-dismiss="modal"> Отмена</button>
                <button type="button" id="btnAddDevice" class="btn btn-primary fa fa-plus-square" onclick="editDevice()"> Добавить</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно назначения владельца автомата -->
<div class="modal" tabindex="-1" role="dialog" id="popupDeviceOwner">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><span class="fa fa-user text-info pr-2"></span>&nbsp;&nbsp;Назначение владельца автомата</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="ownerDevId" style="display: none" value=""></div>

                <div class="alert alert-danger" id="errorOwnerDialog" style="display: none">
                    <i class="fa fa-warning" aria-hidden="true"></i>&nbsp;&nbsp;
                    <strong>Errors</strong>
                </div>
                <div id="determinationDeviceOwnerTitle"></div>

                <div id="tblOwners"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary fa fa-ban" data-dismiss="modal"> Отмена</button>
                <button type="button" class="btn btn-primary fa fa-save" onclick="setOwner()"> Сохранить</button>
            </div>
        </div>
    </div>
</div>

<div class="row admin-dashboard">
    <!-- Левая колонка -------------------------------------------------------------->
    <section class="col-12 col-sm-12 col-md-auto col-lg-6 col-xl-6 left" style="height: 770px">
        <h4 class="mb-3"><i class="fa fa-users mr-2 text-warning"></i>Пользователи</h4>
        <div id="tbUsers"></div>

        <button onclick="updateUsersList()" data-toggle="tooltip" data-placement="top" title="Обновить список пользователей"
                class="btn btn-info btn-sm mb-3">
            <i class="fa fa-refresh"></i>&nbsp;&nbsp;Обновить
        </button>
    </section>

    <!-- Средняя колонка -------------------------------------------------------------------------->
    <section class="col-12 col-sm-12 col-md-auto col-lg-6 col-xl-6 right" style="height: 870px">
        <h4 class="mb-3"><i class="fa fa-map-marker mr-2 text-warning" aria-hidden="true"></i>Автоматы</h4>
        <div id="tbDevices"></div>

        <button onclick="updateDevicesList()" data-toggle="tooltip" data-placement="top" title="Обновить список автоматов"
                class="btn btn-info btn-sm mb-3">
            <i class="fa fa-refresh"></i>&nbsp;&nbsp;Обновить
        </button>
    </section>

</div>

<script>
    var device;
    const accStr = sessionStorage.getItem(accountKey);
    if (!accStr) {
        window.location.replace("/Account/Login");
    }
    var acc = JSON.parse(accStr);
    var role = acc.role;
    if (role.toLowerCase().indexOf("tech") >= 0) window.location.replace("/Dashboard");

    $('#chk1').change(function () {
        document.getElementById("deleteBtn").disabled = !$(this).prop('checked');
    });

    function deleteUser() {
        const id = document.getElementById("deleteUserId").value;
        var usrError = document.getElementById("deleteError");
        usrError.style.display = 'none';
        $.deleteObj(`/api/users/${id}`).then(function() {
                $('#deletePopup').modal('hide');
                updateUsersList();
            },
            function(res) {
                if (res.readyState === 4 && res.status === 200) {
                    $('#deletePopup').modal('hide');
                    updateUsersList();
                } else {
                    const message = res.responseText ? res.responseText : `Error${res.status}`;

                    usrError.innerHTML = `<i class="fa fa-warning" aria-hidden="true"></i>&nbsp;&nbsp;${message}`;
                    usrError.style.display = 'block';
                }
            });
    }

    function saveUser() {
        const form = $("#userForm").dxForm("instance");
        const valid = form.validate();
        var usrError = document.getElementById("userError");
        usrError.style.display = 'none';
        if (!valid || !valid.isValid) return;

        const data = form.option('formData');

        $.putJSON("/api/users/", data, null)
            .then(function () {
                $('#userPopup').modal('hide');
                updateUsersList();
            },
                function (res) {
                    if (res.readyState === 4 && res.status === 200) {
                        $('#userPopup').modal('hide');
                        updateUsersList();
                    } else {
                        const message = res.responseText ? res.responseText : `Error${res.status}`;

                        usrError.innerHTML = `<i class="fa fa-warning" aria-hidden="true"></i>&nbsp;&nbsp;${message}`;
                        usrError.style.display = 'block';

                        //DevExpress.ui.notify(message,);
                        //DevExpress.ui.notify({ message: message }, "error", 5000);
                    }
                });
    }

    function openUserPopup(user) {
        var own = false;
        var tch = false;
        if (user.role.toLowerCase().indexOf("owner") >= 0) own = true;
        if (user.role.toLowerCase().indexOf("tech") >= 0) tch = true;
        var crEmail = user.email;
        var crPhone = user.phone;
     
        const form = $("#userForm").dxForm({
            formData: user,
            readOnly: false,
            showColonAfterLabel: true,
            labelLocation: "left",
            items: [
                {
                    dataField: "lastName",
                    label: {
                        text: "Фамилия"
                    },
                    validationRules: [
                        {
                            type: "required",
                            message: "Введите фамилию."
                        },
                        {
                            type: "stringLength",
                            min: 3,
                            message: "Фамилия должна быть не менее 3 символов."
                        }
                    ]
                },
                {
                    dataField: "firstName",
                    label: {
                        text: "Имя"
                    },
                    validationRules: [
                        {
                            type: "required",
                            message: "Введите имя."
                        },
                        {
                            type: "stringLength",
                            min: 3,
                            message: "Имя должно быть не менее 3 символов."
                        }
                    ]
                },
                {
                    dataField: "patronymic",
                    label: {
                        text: "Отчество"
                    },
                    validationRules: [
                        {
                            type: "required",
                            message: "Введите отчество."
                        },
                        {
                            type: "stringLength",
                            min: 3,
                            message: "Отчество должно быть не менее 3 символов."
                        }
                    ]
                },
                {
                    dataField: "email",
                    label: {
                        text: "Email",
                        visible: true
                    },
                    validationRules: [{
                        type: "required",
                        message: "Введите email."
                    }, {
                        type: "email",
                        message: "Неверный email."
                    }, {
                        type: "async",
                        message: "Email уже зарегистрирован.",
                        validationCallback: function (params) {
                            if (params.value === crEmail) {
                                var d = $.Deferred();
                                setTimeout(function () {
                                    d.resolve(true);
                                }, 1);
                                return d.promise();
                            }

                            return checkEmail(params.value);
                        }
                    }]
                },
                {
                    dataField: "phone",
                    label: {
                        text: "Номер моб. телефона:",
                        visible: true
                    },
                    editorOptions: {
                        placeholder: "+7 XXX-XXX-XX-XX"
                    },
                    validationRules: [
                        {
                            type: "required",
                            message: "Введите телефон."
                        },
                        {
                            type: "pattern",
                            pattern: /^\+?[0-9-()]+$/,
                            message: "Телефон должен иметь правильный формат."
                        },
                        {
                            type: "async",
                            message: "Телефон уже зарегистрирован.",
                            validationCallback: function (params) {
                                if (params.value === crPhone) {
                                    var d = $.Deferred();
                                    setTimeout(function () {
                                        d.resolve(true);
                                    }, 1);
                                    return d.promise();
                                }
                                return checkPhone(params.value);
                            }
                        }]
                },
                {
                    dataField: "organization",
                    label: {
                        text: "Наименование организации:"
                    }
                },
                {
                    dataField: "city",
                    label: {
                        text: "Город (населенный пункт):"
                    },
                    validationRules: [
                        {
                            type: "required",
                            message: "Введите населенный пункт."
                        }
                    ]
                },
                {
                    dataField: "ownerId",
                    editorType: "dxSelectBox",
                    visible: own,
                    label: {
                        text: "Дилер"
                    },
                    editorOptions: {
                        //dataSource: timeZones,
                        valueExpr: "id",
                        displayExpr: "name"
                        //value: 2
                    }
                },
                {
                    dataField: "password",
                    dataType: "string",
                    label: {
                        text: "Новый пароль"
                    },
                    editorOptions: {
                        name: "password",
                        mode: "password",
                        placeholder: "Введите новый пароль",
                        buttons: [
                            {
                                name: "password",
                                location: "after",
                                options: {
                                    icon: '../images/eye.png',
                                    type: "default",
                                    onClick: function () {
                                        const passwordEditor = form.getEditor("password");
                                        passwordEditor.option("mode",
                                            passwordEditor.option("mode") === "text" ? "password" : "text");
                                    }
                                }
                            }
                        ]
                    },
                    validationRules: [{
                        type: "custom",
                        validationCallback: function (e) {
                            if (!e.value) return true;

                            const pws = $.trim(e.value);
                            const withSpace = e.value.length;
                            const pwsLg = pws.length;
                            if (withSpace !== pwsLg) return false;
                            if (withSpace < 4 || withSpace > 50) return false;
                            return true;
                        },
                        message: "Пароль должен быть от 4 до 50 символов."
                    }]
                },
                {
                    dataField: "confirmPassword",
                    dataType: "string",
                    label: {
                        text: "Подтверждение пароля"
                    },
                    editorOptions: {
                        name: "confirmPassword",
                        mode: "password",
                        placeholder: "Пароль ещё раз",
                        buttons: [
                            {
                                name: "confirmPassword",
                                location: "after",
                                options: {
                                    icon: '../images/eye.png',
                                    type: "default",
                                    onClick: function () {
                                        const passwordEditor = form.getEditor("confirmPassword");
                                        passwordEditor.option("mode",
                                            passwordEditor.option("mode") === "text" ? "password" : "text");
                                    }
                                }
                            }
                        ]
                    },
                    validationRules: [
                        {
                            type: "compare",
                            message: "'Новый пароль' и 'Подтверждение пароля' не совпадают.",
                            comparisonTarget: function () {
                                const password = form.getEditor("password");//$("#password").dxTextBox("instance");
                                if (password) {
                                    return password.option("value");
                                }
                            }
                        }
                    ]
                },
                {
                    dataField: "commerceVisible",
                    editorType: "dxCheckBox",
                    visible: tch,
                    label: {
                        text: "Доступ к коммерческой информации"
                    }
                }
            ]
        }).dxForm("instance");

        $.getJSON(`/api/users/getUserById/${user.id}`, null)
            .then(function (data) {
                user = data;
                form.option("formData", data);
            }
            );

        $.getJSON("/api/users/getDealers", null)
            .then(function (data) {
                const editor = form.getEditor("ownerId");
                editor.option("dataSource", data);
                editor.option("value", user.ownerId);
            }
            );
    }

    function editDevice() {
        postDevice().then(function (data) {
            if (data === true) updateDevicesList();
        });
    }

    function updateDevicesList() {
        $.getJSON("/api/devices", null)
            .then(function (data) {
                $("#tbDevices").dxDataGrid('instance').option('dataSource', data);
            },
                function (res) {
                    if (res.status === 401 || res.status === 403) logout();
                });
    }

    function updateUsersList() {
        $.getJSON("/api/users/", null)
            .then(function (data) {
                $("#tbUsers").dxDataGrid('instance').option('dataSource', data);
            },
                function (res) {
                    if (res.status === 401 || res.status === 403) logout();
                });
    }

    function setActive(value) {
        const dataGrid = $("#tbUsers").dxDataGrid("instance");
        const rowKey = dataGrid.option("focusedRowKey");
        $.putJSON("/api/users/setActive/" + rowKey, value, null)
            .then(function () {
                updateUsersList();
            },
                function (res) {
                    if (res.readyState === 4 && res.status === 200) {
                        updateUsersList();
                    } else {
                        const message = res.responseText ? res.responseText : `Error${res.status}`;
                        DevExpress.ui.notify(message,);
                        //DevExpress.ui.notify({ message: message, width: 300, shading: true }, "error", 2000);
                        DevExpress.ui.notify({ message: message }, "error", 5000);
                        //document.getElementById("errors").style.display = "block";
                    }
                });
    }

    function ownerPopupOpen(dev) {
        document.getElementById("determinationDeviceOwnerTitle").innerText = null;
        document.getElementById("ownerDevId").value = null;

        $("#tblOwners").dxDataGrid({
            focusedRowEnabled: true,
            showColumnLines: true,
            showRowLines: true,
            keyExpr: "id",
            columnAutoWidth: true,
            columnFixing: { enabled: false },
            cellHintEnabled: true,
            paging: { pageSize: 10 },
            pager: {
                showInfo: true,
                infoText: 'Страница {0} из {1} ({2} владельцев)'
            },
            showBorders: true,
            wordWrapEnabled: false,
            selection: { mode: 'none' },
            loadPanel: { enabled: true },
            onFocusedRowChanging: function (e) {
                var rowsCount = e.component.getVisibleRows().length;
                const pageCount = e.component.pageCount();
                const pageIndex = e.component.pageIndex();
                const key = e.event && e.event.key;

                if (key && e.prevRowIndex === e.newRowIndex) {
                    if (e.newRowIndex === rowsCount - 1 && pageIndex < pageCount - 1) {
                        e.component.pageIndex(pageIndex + 1).done(function () {
                            e.component.option("focusedRowIndex", 0);
                        });
                    } else if (e.newRowIndex === 0 && pageIndex > 0) {
                        e.component.pageIndex(pageIndex - 1).done(function () {
                            e.component.option("focusedRowIndex", rowsCount - 1);
                        });
                    }
                }
            },
            onFocusedRowChanged: function (e) {
                const user = e.row && e.row.data;
                if (user) {
                    document.getElementById("determinationDeviceOwnerTitle").innerText =
                        `Владелец - (${user.lastName} - ${user.email})`;
                    document.getElementById("ownerDevId").value = user.id;
                } else {
                    document.getElementById("ownerDevId").value = null;
                }
            },
            searchPanel: {
                visible: true,
                placeholder: "Поиск пользователя"
            },
            columns: [
                {
                    dataField: "email",
                    visible: false
                },
                {
                    dataField: "firstName",
                    visible: false
                },
                {
                    dataField: "patronymic",
                    visible: false
                },
                {
                    dataField: "organization",
                    visible: false
                },
                {
                    dataField: "lastName",
                    allowSorting: true,
                    caption: "Фамилия/email",
                    headerCellTemplate: function (header, info) {
                        setHeader(header, info);
                    },
                    cellTemplate: function (element, info) {
                        element.append('<div>' + info.value + '</div>');
                        element.append('<div>' + info.data.email + '</div>'); //.css("class","fa fa-exclamation-triangle text-danger");
                    }
                },
                {
                    allowSorting: true,
                    dataField: "city",
                    caption: "Город",
                    cssClass: "vert-align",
                    headerCellTemplate: function (header, info) {
                        setHeader(header, info);
                    }
                }
            ]
        });

        updateOwnersList(dev.ownerId);
    }

    function updateOwnersList(ownerId) {
        var dataGrid = $("#tblOwners").dxDataGrid('instance');
        if (!dataGrid) return;

        $.getJSON("/api/users/getOwners", null)
            .then(function (data) {
                dataGrid.option('dataSource', data);
                if (ownerId) dataGrid.option("focusedRowKey", ownerId);
                else {
                    dataGrid.option("focusedRowKey", null);
                }
            },
                function (res) {
                    if (res.status === 401 || res.status === 403) logout();
                });
    }

    function setOwner() {
        const ownerId = document.getElementById("ownerDevId").value;
        document.getElementById("errors").style.display = "none";

        const request = $.putJSON(`/api/device/setOwner/${device.id}`, ownerId, null);
        request.then(function () {
            $('#popupDeviceOwner').modal('hide');
            updateDevicesList();
        },
            function (res) {
                if (res.readyState === 4 && res.status === 200) {
                    $('#popupDeviceOwner').modal('hide');
                    updateDevicesList();
                } else {
                    const message = res.responseText ? res.responseText : `Error${res.status}`;
                    document.getElementById("errorOwnerDialog").innerHTML = message;
                    document.getElementById("errorOwnerDialog").style.display = "block";
                }
            });
    }

    $(function () {
        var wdz = 32;
        if (role.toLowerCase().indexOf("super") >= 0 || role.toLowerCase() === "admin") wdz = 60;
        $("#tbUsers").dxDataGrid({
            editing: {
                allowUpdating: false,
                allowAdding: false,
                allowDeleting: false
            },
            focusedRowEnabled: true,
            showColumnLines: true,
            showRowLines: true,
            keyExpr: "id",
            columnAutoWidth: true,
            columnFixing: { enabled: false },
            cellHintEnabled: true,
            paging: { pageSize: 10 },
            pager: {
                infoText: 'Страница {0} из {1} ({2} пользователей)',
                showInfo: true,
                visible: "always"
            },
            headerFilter: { visible: true },
            showBorders: true,
            wordWrapEnabled: false,
            selection: { mode: 'single' },
            height: 670,
            hoverStateEnabled: true,
            loadPanel: { enabled: true },
            searchPanel: {
                visible: true,
                highlightCaseSensitive: true,
                placeholder: "Ведите Email, фамилию, организацию или населенный пункт",
                width: '100%'
            },
            onFocusedRowChanging: function (e) {
                var rowsCount = e.component.getVisibleRows().length;
                const pageCount = e.component.pageCount();
                const pageIndex = e.component.pageIndex();
                const key = e.event && e.event.key;

                if (key && e.prevRowIndex === e.newRowIndex) {
                    if (e.newRowIndex === rowsCount - 1 && pageIndex < pageCount - 1) {
                        e.component.pageIndex(pageIndex + 1).done(function () {
                            e.component.option("focusedRowIndex", 0);
                        });
                    } else if (e.newRowIndex === 0 && pageIndex > 0) {
                        e.component.pageIndex(pageIndex - 1).done(function () {
                            e.component.option("focusedRowIndex", rowsCount - 1);
                        });
                    }
                }
            },
            onFocusedRowChanged: function (e) {
                const user = e.row && e.row.data;
                $("#tbDevices").dxDataGrid("instance").searchByText(user.id);;
            },
            columns: [
                {
                    width: wdz,
                    fixed: false,
                    allowSorting: true,
                    type: "buttons",
                    alignment: "center",
                    cssClass: "vert-btn-align",
                    caption: "",
                    buttons: [
                        {
                            hint: "Изменить данные пользователя",
                            cssClass: "btn btn-info btn-sm btn-font text-white fa fa-user",
                            //icon: "fa fa-user",
                            onClick: function (e) {
                                const user = e.row.data;
                                $('#userPopup').modal('toggle');
                                openUserPopup(user);
                            }
                        },
                        {
                            hint: "Удалить",
                            visible: function () {
                                if (role.toLowerCase().indexOf("super") >= 0 || role.toLowerCase() === "admin") return true;
                                return false;
                            },
                            //icon: "fa fa-remove",
                            cssClass: "btn btn-danger btn-sm btn-font text-white fa fa-remove", //fa fa-window-close text-danger",
                            onClick: function (e) {
                                const user = e.row.data;
                                var messageHtml = "<div>Вы действительно хотите удалить</div>" +
                                    `<div>пользователя "${user.lastName} ${user.firstName}" из системы?</div>`;
                                document.getElementById("deleteCaption").innerHTML = messageHtml;
                                document.getElementById("deleteUserId").value = user.id;
                                var usrError = document.getElementById("deleteError");
                                $('#deleteBtn').prop('disabled', true);
                                $('#chk1').prop('checked', false);
                                
                                usrError.style.display = 'none';
                                usrError.innerText = null;
                                $('#deletePopup').modal('toggle');
                            }
                        }
                    ]
                },
                {
                    width: 32,
                    dataField: "activated",
                    allowSorting: true,
                    alignment: "center",
                    cssClass: "vert-btn-align",
                    caption: "",
                    cellTemplate: function (element, info) {
                        const user = info.data;
                        var dx;
                        switch (user.activated) {
                            case true:
                                dx = '<a href="#" class="btn btn-success btn-sm btn-font fa fa-unlock" onclick="setActive(false)" data-toggle="tooltip" title="Деактивировать"></a>';
                                element.append(dx);
                                break;
                            case false:
                                dx = '<a href="#" class="btn btn-danger btn-sm btn-font fa fa-lock" onclick="setActive(true)" data-toggle="tooltip" title="Активировать"></a>';
                                element.append(dx);
                                break;
                            default:
                                dx = '<a href="#" class="btn btn-warning btn-sm btn-font fa fa-warning" onclick="setActive(true)" data-toggle="tooltip" title="Зарегистрировать"></a>';
                                element.append(dx);
                                break;
                        }
                    },
                    headerFilter: {
                        dataSource: [
                            {
                                text: "Активные",
                                value: ["activated", "=", true],
                                template: function () {
                                    return '<i class="fa fa-unlock text-success" aria-hidden="true"></i>&nbsp;Активные';
                                }
                            },
                            {
                                text: "Неактивные",
                                value: ["activated", "=", false],
                                template: function () {
                                    return '<i class="fa fa-lock text-danger" aria-hidden="true"></i>&nbsp;Неактивные';
                                }
                            },
                            {
                                text: "Новые",
                                value: ["activated", "=", null],
                                template: function () {
                                    //"btn btn-warning btn-sm text-dark fa fa-warning""
                                    return '<i class="fa fa-warning text-warning" aria-hidden="true"></i>&nbsp;Новые';
                                }
                            }
                        ]
                    }
                },
                {
                    dataField: "lastName",
                    allowSorting: true,
                    caption: "Фамилия/email",
                    headerCellTemplate: function (header, info) {
                        setHeader(header, info);
                    },
                    cellTemplate: function (element, info) {
                        element.append('<div>' + info.value + '</div>');
                        element.append('<div>' + info.data.email + '</div>'); //.css("class","fa fa-exclamation-triangle text-danger");
                    }
                },
                {
                    allowSorting: true,
                    dataField: "organization",
                    caption: "Организация",
                    cssClass: "vert-align",
                    dataType: "string",
                    headerCellTemplate: function (header, info) {
                        setHeader(header, info);
                    }
                },
                {
                    allowSorting: true,
                    dataField: "city",
                    caption: "Город",
                    cssClass: "vert-align",
                    dataType: "string",
                    headerCellTemplate: function (header, info) {
                        setHeader(header, info);
                    }
                },
                {
                    allowSorting: true,
                    dataField: "role",
                    caption: "Роль",
                    //caption: "Роль/Email владельца",
                    cssClass: "vert-align",
                    dataType: "string",
                    headerCellTemplate: function (header, info) {
                        setHeader(header, info);
                    },
                    cellTemplate: function (element, info) {
                        element.append(`<div>${getNornRole(info.value)}</div>`);
                        if (info.data.ownerEmeil) {
                            element.append(`<div>${info.data.ownerEmeil}</div>`);
                        }
                    },
                    headerFilter: {
                        dataSource: [
                            {
                                text: "Техник",
                                value: ["role", "=", "technician"]
                            },
                            {
                                text: "Владелец",
                                value: ["role", "=", "owner"]
                            },
                            {
                                text: "Адм. дилера",
                                value: ["role", "=", "dealer_admin"]
                            },
                            {
                                text: "Дилер",
                                value: ["role", "=", "dealer"]
                            },
                            {
                                text: "Админ",
                                value: ["role", "=", "admin"]
                            }
                        ]
                    }
                },
                {
                    dataField: "email",
                    visible: false
                }
                //,
                //{
                //    dataField: "lastName",
                //    visible: false
                //}
            ]
        });
        updateUsersList();


        //=========================================================
        $("#tbDevices").dxDataGrid({
            showColumnLines: true,
            showRowLines: true,
            keyExpr: "id",
            columnAutoWidth: true,
            columnFixing: { enabled: false },
            cellHintEnabled: true,
            paging: { pageSize: 10 },
            pager: {
                showInfo: true,
                infoText: 'Страница {0} из {1} ({2} автоматов)',
                visible: "always"
            },
            headerFilter: { visible: true },
            showBorders: true,
            wordWrapEnabled: false,
            selection: { mode: 'none' },
            //selection: { mode: 'single' },
            height: 670,
            hoverStateEnabled: true,
            loadPanel: { enabled: true },
            searchPanel: {
                visible: true,
                highlightCaseSensitive: true,
                placeholder: "Введите ID или адрес автомата."
            },
            //focusedRowEnabled: true,
            //onFocusedRowChanging: function (e) {
            //    var rowsCount = e.component.getVisibleRows().length;
            //    const pageCount = e.component.pageCount();
            //    const pageIndex = e.component.pageIndex();
            //    const key = e.event && e.event.key;

            //    if (key && e.prevRowIndex === e.newRowIndex) {
            //        if (e.newRowIndex === rowsCount - 1 && pageIndex < pageCount - 1) {
            //            e.component.pageIndex(pageIndex + 1).done(function () {
            //                e.component.option("focusedRowIndex", 0);
            //            });
            //        } else if (e.newRowIndex === 0 && pageIndex > 0) {
            //            e.component.pageIndex(pageIndex - 1).done(function () {
            //                e.component.option("focusedRowIndex", rowsCount - 1);
            //            });
            //        }
            //    }
            //},
            //onFocusedRowChanged: function (e) {
            //    device = e.row && e.row.data;
            //},
            columns: [
                {
                    dataField: "ownerId",
                    visible: false
                },
                {
                    dataField: "ownerEmail",
                    visible: false
                },
                {
                    fixed: false,
                    width: 170,
                    type: "buttons",
                    cssClass: "vert-btn-align",
                    buttons: [
                        {
                            hint: "Сменить/назначить владельца",
                            //icon: "fa fa-user",
                            cssClass: "btn btn-danger btn-sm btn-font text-white fa fa-user",
                            onClick: function (e) {
                                device = e.row.data;
                                $('#popupDeviceOwner').modal('toggle');
                                ownerPopupOpen(device);
                            }
                        },
                        {
                            hint: "Просмотр и редактирование данных автомата",
                            //icon: "fa fa-pencil",
                            cssClass: "btn btn-primary btn-sm btn-font text-white fa fa-pencil",
                            onClick: function (e) {
                                device = e.row.data;
                                $('#popupDevice').modal('toggle');
                                addDevice(device, 'devMetricsAdd');
                            }
                        },
                        {
                            hint: "Технические настройки автомата",
                            //icon: "fa fa-gear",
                            cssClass: "btn btn-primary btn-sm btn-font text-white fa fa-gear",
                            onClick: function (e) {
                                device = e.row.data;
                                $('#popupDevSettings').modal('toggle');
                                devSettings(device);
                            }
                        },
                        {
                            hint: "Список продаж",
                            //icon: "fa fa-shopping-cart",
                            cssClass: "btn btn-success btn-sm btn-font text-white fa fa-shopping-cart",
                            onClick: function (e) {
                                device = e.row.data;
                                popupSales();
                            }
                        },
                        {
                            hint: "Список инкассаций",
                            //icon: "fa fa-truck",
                            cssClass: "btn btn-secondary btn-sm btn-font text-light fa fa-truck",
                            onClick: function (e) {
                                device = e.row.data;
                                popupEncash();
                            }
                        },
                        {
                            hint: "Список аварий",
                            //icon: "fa fa-warning",
                            cssClass: "btn btn-warning btn-sm btn-font text-dark fa fa-warning",
                            onClick: function (e) {
                                device = e.row.data;
                                popupAlerts();
                            }
                        }
                    ]
                },
                {
                    dataField: "imei",
                    allowSorting: true,
                    caption: "ID автомата",
                    cssClass: "vert-align",
                    headerCellTemplate: function (header, info) {
                        setHeader(header, info);
                    },
                    cellTemplate: function (element, info) {
                        const dev = info.data;
                        var html = '<span class="text-nowrap d-flex">';
                        element.append('<div>' + dev.imei + '</div>');

                        var fieldHtml = '<span class="text-success flex-grow-1">В работе</span>&nbsp;'; //'<span class="text-nowrap d-flex"><i class="text-success"> В работе</i>';
                        if (dev.alerts && (jQuery.inArray("NO_SALES", dev.alerts) !== -1)) fieldHtml = '<span class="text-warning flex-grow-1">Нет продаж</span>';

                        if (!dev.lastStatus || (dev.alerts && (jQuery.inArray("NO_LINK", dev.alerts) !== -1))) fieldHtml = '<span class="text-danger flex-grow-1">Нет связи</span>';

                        if (dev.alerts && (jQuery.inArray("TANK_EMPTY", dev.alerts) !== -1)) fieldHtml = '<span class="text-danger flex-grow-1">Бак пуст</span>';

                        html += fieldHtml;
                        //element.append(fieldHtml);
                        if (dev.lastStatus) {
                            var sum = `${dev.lastStatus.totalMoney} ${getCurrencySign(dev)}`;;
                            var sumHtml = `<span class="badge-success pl-1 pr-1 flex-grow-0">${sum}</span>`;
                            //element.append(sumHtml);
                            html += sumHtml;
                        }
                        html += '</span>';
                        element.append(html);
                        //element.append('<div>' + info.value + '</div>');
                        //element.append('<div>' + info.data.ownerEmail + '</div>');
                    }
                },
                {
                    allowSorting: true,
                    dataField: "address",
                    caption: "Адрес",
                    cssClass: "vert-align",
                    dataType: "string",
                    headerCellTemplate: function (header, info) {
                        setHeader(header, info);
                    }
                },
                {
                    allowSorting: true,
                    dataField: "ownerName",
                    caption: "Владелец",
                    cssClass: "vert-align",
                    //width: '110px',
                    headerCellTemplate: function (header, info) {
                        setHeader(header, info);
                    },
                    cellTemplate: function (element, info) {
                        if (info.value) element.append('<div>' + info.value + '</div>');
                        if (info.data.ownerEmail) element.append('<div>' + info.data.ownerEmail + '</div>');
                    }
                }
            ]
        });
        updateDevicesList();

        datePickerInite();

    });
</script>
